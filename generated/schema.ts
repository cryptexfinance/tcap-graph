// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): string {
    let value = this.get("decimals");
    return value.toString();
  }

  set decimals(value: string) {
    this.set("decimals", Value.fromString(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (value === null) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(value as string));
    }
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): BigInt | null {
    let value = this.get("vaultId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set vaultId(value: BigInt | null) {
    if (value === null) {
      this.unset("vaultId");
    } else {
      this.set("vaultId", Value.fromBigInt(value as BigInt));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(value as BigInt));
    }
  }

  get debt(): BigInt | null {
    let value = this.get("debt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt | null) {
    if (value === null) {
      this.unset("debt");
    } else {
      this.set("debt", Value.fromBigInt(value as BigInt));
    }
  }

  get currentRatio(): BigInt | null {
    let value = this.get("currentRatio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentRatio(value: BigInt | null) {
    if (value === null) {
      this.unset("currentRatio");
    } else {
      this.set("currentRatio", Value.fromBigInt(value as BigInt));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }
}

export class State extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save State entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save State entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("State", id.toString(), this);
  }

  static load(id: string): State | null {
    return store.get("State", id) as State | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    return value.toBoolean();
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get tcapContract(): Bytes | null {
    let value = this.get("tcapContract");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tcapContract(value: Bytes | null) {
    if (value === null) {
      this.unset("tcapContract");
    } else {
      this.set("tcapContract", Value.fromBytes(value as Bytes));
    }
  }

  get collateralContract(): Bytes | null {
    let value = this.get("collateralContract");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateralContract(value: Bytes | null) {
    if (value === null) {
      this.unset("collateralContract");
    } else {
      this.set("collateralContract", Value.fromBytes(value as Bytes));
    }
  }

  get collateralOracle(): Bytes | null {
    let value = this.get("collateralOracle");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateralOracle(value: Bytes | null) {
    if (value === null) {
      this.unset("collateralOracle");
    } else {
      this.set("collateralOracle", Value.fromBytes(value as Bytes));
    }
  }

  get ethContract(): Bytes | null {
    let value = this.get("ethContract");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ethContract(value: Bytes | null) {
    if (value === null) {
      this.unset("ethContract");
    } else {
      this.set("ethContract", Value.fromBytes(value as Bytes));
    }
  }

  get tcapOracle(): Bytes | null {
    let value = this.get("tcapOracle");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tcapOracle(value: Bytes | null) {
    if (value === null) {
      this.unset("tcapOracle");
    } else {
      this.set("tcapOracle", Value.fromBytes(value as Bytes));
    }
  }

  get burnFee(): BigInt | null {
    let value = this.get("burnFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set burnFee(value: BigInt | null) {
    if (value === null) {
      this.unset("burnFee");
    } else {
      this.set("burnFee", Value.fromBigInt(value as BigInt));
    }
  }

  get liquidationPenalty(): BigInt | null {
    let value = this.get("liquidationPenalty");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationPenalty(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidationPenalty");
    } else {
      this.set("liquidationPenalty", Value.fromBigInt(value as BigInt));
    }
  }

  get ratio(): BigInt | null {
    let value = this.get("ratio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ratio(value: BigInt | null) {
    if (value === null) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigInt(value as BigInt));
    }
  }

  get divisor(): BigInt | null {
    let value = this.get("divisor");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set divisor(value: BigInt | null) {
    if (value === null) {
      this.unset("divisor");
    } else {
      this.set("divisor", Value.fromBigInt(value as BigInt));
    }
  }

  get amountStaked(): BigInt | null {
    let value = this.get("amountStaked");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountStaked(value: BigInt | null) {
    if (value === null) {
      this.unset("amountStaked");
    } else {
      this.set("amountStaked", Value.fromBigInt(value as BigInt));
    }
  }

  get rewardContract(): Bytes | null {
    let value = this.get("rewardContract");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set rewardContract(value: Bytes | null) {
    if (value === null) {
      this.unset("rewardContract");
    } else {
      this.set("rewardContract", Value.fromBytes(value as Bytes));
    }
  }

  get treasuryContract(): Bytes | null {
    let value = this.get("treasuryContract");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set treasuryContract(value: Bytes | null) {
    if (value === null) {
      this.unset("treasuryContract");
    } else {
      this.set("treasuryContract", Value.fromBytes(value as Bytes));
    }
  }
}

export class Oracle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Oracle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Oracle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Oracle", id.toString(), this);
  }

  static load(id: string): Oracle | null {
    return store.get("Oracle", id) as Oracle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get answer(): BigInt | null {
    let value = this.get("answer");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set answer(value: BigInt | null) {
    if (value === null) {
      this.unset("answer");
    } else {
      this.set("answer", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get roundId(): BigInt | null {
    let value = this.get("roundId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set roundId(value: BigInt | null) {
    if (value === null) {
      this.unset("roundId");
    } else {
      this.set("roundId", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Protocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Protocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Protocol", id.toString(), this);
  }

  static load(id: string): Protocol | null {
    return store.get("Protocol", id) as Protocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get totalCollateral(): BigInt | null {
    let value = this.get("totalCollateral");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateral(value: BigInt | null) {
    if (value === null) {
      this.unset("totalCollateral");
    } else {
      this.set("totalCollateral", Value.fromBigInt(value as BigInt));
    }
  }

  get totalDebt(): BigInt | null {
    let value = this.get("totalDebt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalDebt(value: BigInt | null) {
    if (value === null) {
      this.unset("totalDebt");
    } else {
      this.set("totalDebt", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBurnFee(): BigInt | null {
    let value = this.get("totalBurnFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBurnFee(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBurnFee");
    } else {
      this.set("totalBurnFee", Value.fromBigInt(value as BigInt));
    }
  }

  get createdVaults(): BigInt | null {
    let value = this.get("createdVaults");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdVaults(value: BigInt | null) {
    if (value === null) {
      this.unset("createdVaults");
    } else {
      this.set("createdVaults", Value.fromBigInt(value as BigInt));
    }
  }

  get totalTransactions(): BigInt | null {
    let value = this.get("totalTransactions");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt | null) {
    if (value === null) {
      this.unset("totalTransactions");
    } else {
      this.set("totalTransactions", Value.fromBigInt(value as BigInt));
    }
  }

  get underlyingToken(): string | null {
    let value = this.get("underlyingToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set underlyingToken(value: string | null) {
    if (value === null) {
      this.unset("underlyingToken");
    } else {
      this.set("underlyingToken", Value.fromString(value as string));
    }
  }
}

export class TokenHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenHolder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenHolder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenHolder", id.toString(), this);
  }

  static load(id: string): TokenHolder | null {
    return store.get("TokenHolder", id) as TokenHolder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (value === null) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(value as string));
    }
  }

  get delegator(): string | null {
    let value = this.get("delegator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegator(value: string | null) {
    if (value === null) {
      this.unset("delegator");
    } else {
      this.set("delegator", Value.fromString(value as string));
    }
  }

  get tokenBalanceRaw(): BigInt {
    let value = this.get("tokenBalanceRaw");
    return value.toBigInt();
  }

  set tokenBalanceRaw(value: BigInt) {
    this.set("tokenBalanceRaw", Value.fromBigInt(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }

  get totalTokensHeldRaw(): BigInt {
    let value = this.get("totalTokensHeldRaw");
    return value.toBigInt();
  }

  set totalTokensHeldRaw(value: BigInt) {
    this.set("totalTokensHeldRaw", Value.fromBigInt(value));
  }

  get totalTokensHeld(): BigDecimal {
    let value = this.get("totalTokensHeld");
    return value.toBigDecimal();
  }

  set totalTokensHeld(value: BigDecimal) {
    this.set("totalTokensHeld", Value.fromBigDecimal(value));
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Delegate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Delegate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Delegate", id.toString(), this);
  }

  static load(id: string): Delegate | null {
    return store.get("Delegate", id) as Delegate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatedVotesRaw(): BigInt {
    let value = this.get("delegatedVotesRaw");
    return value.toBigInt();
  }

  set delegatedVotesRaw(value: BigInt) {
    this.set("delegatedVotesRaw", Value.fromBigInt(value));
  }

  get delegatedVotes(): BigDecimal {
    let value = this.get("delegatedVotes");
    return value.toBigDecimal();
  }

  set delegatedVotes(value: BigDecimal) {
    this.set("delegatedVotes", Value.fromBigDecimal(value));
  }

  get tokenHoldersRepresentedAmount(): i32 {
    let value = this.get("tokenHoldersRepresentedAmount");
    return value.toI32();
  }

  set tokenHoldersRepresentedAmount(value: i32) {
    this.set("tokenHoldersRepresentedAmount", Value.fromI32(value));
  }

  get tokenHoldersRepresented(): Array<string> {
    let value = this.get("tokenHoldersRepresented");
    return value.toStringArray();
  }

  set tokenHoldersRepresented(value: Array<string>) {
    this.set("tokenHoldersRepresented", Value.fromStringArray(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get targets(): Array<Bytes> | null {
    let value = this.get("targets");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set targets(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("targets");
    } else {
      this.set("targets", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get("values");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("values");
    } else {
      this.set("values", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (value === null) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(value as Array<string>));
    }
  }

  get calldatas(): Array<Bytes> | null {
    let value = this.get("calldatas");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("calldatas");
    } else {
      this.set("calldatas", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get executionETA(): BigInt | null {
    let value = this.get("executionETA");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executionETA(value: BigInt | null) {
    if (value === null) {
      this.unset("executionETA");
    } else {
      this.set("executionETA", Value.fromBigInt(value as BigInt));
    }
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get support(): boolean {
    let value = this.get("support");
    return value.toBoolean();
  }

  set support(value: boolean) {
    this.set("support", Value.fromBoolean(value));
  }

  get votesRaw(): BigInt {
    let value = this.get("votesRaw");
    return value.toBigInt();
  }

  set votesRaw(value: BigInt) {
    this.set("votesRaw", Value.fromBigInt(value));
  }

  get votes(): BigDecimal {
    let value = this.get("votes");
    return value.toBigDecimal();
  }

  set votes(value: BigDecimal) {
    this.set("votes", Value.fromBigDecimal(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class Governance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Governance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Governance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Governance", id.toString(), this);
  }

  static load(id: string): Governance | null {
    return store.get("Governance", id) as Governance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposals(): BigInt {
    let value = this.get("proposals");
    return value.toBigInt();
  }

  set proposals(value: BigInt) {
    this.set("proposals", Value.fromBigInt(value));
  }

  get currentTokenHolders(): BigInt {
    let value = this.get("currentTokenHolders");
    return value.toBigInt();
  }

  set currentTokenHolders(value: BigInt) {
    this.set("currentTokenHolders", Value.fromBigInt(value));
  }

  get currentDelegates(): BigInt {
    let value = this.get("currentDelegates");
    return value.toBigInt();
  }

  set currentDelegates(value: BigInt) {
    this.set("currentDelegates", Value.fromBigInt(value));
  }

  get totalTokenHolders(): BigInt {
    let value = this.get("totalTokenHolders");
    return value.toBigInt();
  }

  set totalTokenHolders(value: BigInt) {
    this.set("totalTokenHolders", Value.fromBigInt(value));
  }

  get totalDelegates(): BigInt {
    let value = this.get("totalDelegates");
    return value.toBigInt();
  }

  set totalDelegates(value: BigInt) {
    this.set("totalDelegates", Value.fromBigInt(value));
  }

  get delegatedVotesRaw(): BigInt {
    let value = this.get("delegatedVotesRaw");
    return value.toBigInt();
  }

  set delegatedVotesRaw(value: BigInt) {
    this.set("delegatedVotesRaw", Value.fromBigInt(value));
  }

  get delegatedVotes(): BigDecimal {
    let value = this.get("delegatedVotes");
    return value.toBigDecimal();
  }

  set delegatedVotes(value: BigDecimal) {
    this.set("delegatedVotes", Value.fromBigDecimal(value));
  }

  get proposalsQueued(): BigInt {
    let value = this.get("proposalsQueued");
    return value.toBigInt();
  }

  set proposalsQueued(value: BigInt) {
    this.set("proposalsQueued", Value.fromBigInt(value));
  }
}

export class Delegator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Delegator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Delegator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Delegator", id.toString(), this);
  }

  static load(id: string): Delegator | null {
    return store.get("Delegator", id) as Delegator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatee(): Bytes {
    let value = this.get("delegatee");
    return value.toBytes();
  }

  set delegatee(value: Bytes) {
    this.set("delegatee", Value.fromBytes(value));
  }

  get delegatedVotesRaw(): BigInt {
    let value = this.get("delegatedVotesRaw");
    return value.toBigInt();
  }

  set delegatedVotesRaw(value: BigInt) {
    this.set("delegatedVotesRaw", Value.fromBigInt(value));
  }

  get delegatedVotes(): BigDecimal {
    let value = this.get("delegatedVotes");
    return value.toBigDecimal();
  }

  set delegatedVotes(value: BigDecimal) {
    this.set("delegatedVotes", Value.fromBigDecimal(value));
  }

  get totalHoldersRepresented(): i32 {
    let value = this.get("totalHoldersRepresented");
    return value.toI32();
  }

  set totalHoldersRepresented(value: i32) {
    this.set("totalHoldersRepresented", Value.fromI32(value));
  }

  get tokenOwners(): Array<string> {
    let value = this.get("tokenOwners");
    return value.toStringArray();
  }

  set tokenOwners(value: Array<string>) {
    this.set("tokenOwners", Value.fromStringArray(value));
  }
}

export class DelegatorTokenOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DelegatorTokenOwner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegatorTokenOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegatorTokenOwner", id.toString(), this);
  }

  static load(id: string): DelegatorTokenOwner | null {
    return store.get("DelegatorTokenOwner", id) as DelegatorTokenOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenOwner(): Bytes {
    let value = this.get("tokenOwner");
    return value.toBytes();
  }

  set tokenOwner(value: Bytes) {
    this.set("tokenOwner", Value.fromBytes(value));
  }

  get delegator(): string {
    let value = this.get("delegator");
    return value.toString();
  }

  set delegator(value: string) {
    this.set("delegator", Value.fromString(value));
  }

  get stake(): BigDecimal {
    let value = this.get("stake");
    return value.toBigDecimal();
  }

  set stake(value: BigDecimal) {
    this.set("stake", Value.fromBigDecimal(value));
  }

  get stakeRaw(): BigInt {
    let value = this.get("stakeRaw");
    return value.toBigInt();
  }

  set stakeRaw(value: BigInt) {
    this.set("stakeRaw", Value.fromBigInt(value));
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogBurn extends ethereum.Event {
  get params(): LogBurn__Params {
    return new LogBurn__Params(this);
  }
}

export class LogBurn__Params {
  _event: LogBurn;

  constructor(event: LogBurn) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogCreateVault extends ethereum.Event {
  get params(): LogCreateVault__Params {
    return new LogCreateVault__Params(this);
  }
}

export class LogCreateVault__Params {
  _event: LogCreateVault;

  constructor(event: LogCreateVault) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogInitializeVault extends ethereum.Event {
  get params(): LogInitializeVault__Params {
    return new LogInitializeVault__Params(this);
  }
}

export class LogInitializeVault__Params {
  _event: LogInitializeVault;

  constructor(event: LogInitializeVault) {
    this._event = event;
  }

  get _divisor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _ratio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _burnFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _liquidationPenalty(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tcapOracle(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _tcapAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get _collateralAddress(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get _collateralOracle(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get _ethOracle(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class LogLiquidateVault extends ethereum.Event {
  get params(): LogLiquidateVault__Params {
    return new LogLiquidateVault__Params(this);
  }
}

export class LogLiquidateVault__Params {
  _event: LogLiquidateVault;

  constructor(event: LogLiquidateVault) {
    this._event = event;
  }

  get _vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _liquidationCollateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogMint extends ethereum.Event {
  get params(): LogMint__Params {
    return new LogMint__Params(this);
  }
}

export class LogMint__Params {
  _event: LogMint;

  constructor(event: LogMint) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRetrieveFees extends ethereum.Event {
  get params(): LogRetrieveFees__Params {
    return new LogRetrieveFees__Params(this);
  }
}

export class LogRetrieveFees__Params {
  _event: LogRetrieveFees;

  constructor(event: LogRetrieveFees) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogSetBurnFee extends ethereum.Event {
  get params(): LogSetBurnFee__Params {
    return new LogSetBurnFee__Params(this);
  }
}

export class LogSetBurnFee__Params {
  _event: LogSetBurnFee;

  constructor(event: LogSetBurnFee) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _burnFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogSetLiquidationPenalty extends ethereum.Event {
  get params(): LogSetLiquidationPenalty__Params {
    return new LogSetLiquidationPenalty__Params(this);
  }
}

export class LogSetLiquidationPenalty__Params {
  _event: LogSetLiquidationPenalty;

  constructor(event: LogSetLiquidationPenalty) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _liquidationPenalty(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogSetRatio extends ethereum.Event {
  get params(): LogSetRatio__Params {
    return new LogSetRatio__Params(this);
  }
}

export class LogSetRatio__Params {
  _event: LogSetRatio;

  constructor(event: LogSetRatio) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _ratio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC20Vault__getVaultResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ERC20Vault__vaultsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class ERC20Vault extends ethereum.SmartContract {
  static bind(address: Address): ERC20Vault {
    return new ERC20Vault("ERC20Vault", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETHPriceOracle(): Address {
    let result = super.call("ETHPriceOracle", "ETHPriceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_ETHPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ETHPriceOracle",
      "ETHPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TCAPPrice(): BigInt {
    let result = super.call("TCAPPrice", "TCAPPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TCAPPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TCAPPrice", "TCAPPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TCAPToken(): Address {
    let result = super.call("TCAPToken", "TCAPToken():(address)", []);

    return result[0].toAddress();
  }

  try_TCAPToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("TCAPToken", "TCAPToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnFee(): BigInt {
    let result = super.call("burnFee", "burnFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnFee", "burnFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralContract(): Address {
    let result = super.call(
      "collateralContract",
      "collateralContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralContract",
      "collateralContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralPriceOracle(): Address {
    let result = super.call(
      "collateralPriceOracle",
      "collateralPriceOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralPriceOracle",
      "collateralPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  divisor(): BigInt {
    let result = super.call("divisor", "divisor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_divisor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("divisor", "divisor():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFee(_amount: BigInt): BigInt {
    let result = super.call("getFee", "getFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_getFee(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOraclePrice(_oracle: Address): BigInt {
    let result = super.call(
      "getOraclePrice",
      "getOraclePrice(address):(uint256)",
      [ethereum.Value.fromAddress(_oracle)]
    );

    return result[0].toBigInt();
  }

  try_getOraclePrice(_oracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOraclePrice",
      "getOraclePrice(address):(uint256)",
      [ethereum.Value.fromAddress(_oracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(_id: BigInt): ERC20Vault__getVaultResult {
    let result = super.call(
      "getVault",
      "getVault(uint256):(uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new ERC20Vault__getVaultResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getVault(_id: BigInt): ethereum.CallResult<ERC20Vault__getVaultResult> {
    let result = super.tryCall(
      "getVault",
      "getVault(uint256):(uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Vault__getVaultResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getVaultRatio(_vaultId: BigInt): BigInt {
    let result = super.call(
      "getVaultRatio",
      "getVaultRatio(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toBigInt();
  }

  try_getVaultRatio(_vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultRatio",
      "getVaultRatio(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidationPenalty(): BigInt {
    let result = super.call(
      "liquidationPenalty",
      "liquidationPenalty():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationPenalty",
      "liquidationPenalty():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationReward(_vaultId: BigInt): BigInt {
    let result = super.call(
      "liquidationReward",
      "liquidationReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toBigInt();
  }

  try_liquidationReward(_vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationReward",
      "liquidationReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleDigits(): BigInt {
    let result = super.call("oracleDigits", "oracleDigits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oracleDigits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oracleDigits", "oracleDigits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ratio(): BigInt {
    let result = super.call("ratio", "ratio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ratio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ratio", "ratio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requiredCollateral(_amount: BigInt): BigInt {
    let result = super.call(
      "requiredCollateral",
      "requiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_requiredCollateral(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredCollateral",
      "requiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requiredLiquidationTCAP(_vaultId: BigInt): BigInt {
    let result = super.call(
      "requiredLiquidationTCAP",
      "requiredLiquidationTCAP(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toBigInt();
  }

  try_requiredLiquidationTCAP(_vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredLiquidationTCAP",
      "requiredLiquidationTCAP(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tcapOracle(): Address {
    let result = super.call("tcapOracle", "tcapOracle():(address)", []);

    return result[0].toAddress();
  }

  try_tcapOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("tcapOracle", "tcapOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userToVault(param0: Address): BigInt {
    let result = super.call("userToVault", "userToVault(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userToVault(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToVault",
      "userToVault(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: BigInt): ERC20Vault__vaultsResult {
    let result = super.call(
      "vaults",
      "vaults(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ERC20Vault__vaultsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_vaults(param0: BigInt): ethereum.CallResult<ERC20Vault__vaultsResult> {
    let result = super.tryCall(
      "vaults",
      "vaults(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Vault__vaultsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get orchestrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _divisor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ratio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _burnFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationPenalty(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _tcapOracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _tcapAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _collateralAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _collateralOracle(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _ethOracle(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateVaultCall extends ethereum.Call {
  get inputs(): LiquidateVaultCall__Inputs {
    return new LiquidateVaultCall__Inputs(this);
  }

  get outputs(): LiquidateVaultCall__Outputs {
    return new LiquidateVaultCall__Outputs(this);
  }
}

export class LiquidateVaultCall__Inputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _requiredTCAP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateVaultCall__Outputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RetrieveFeesCall extends ethereum.Call {
  get inputs(): RetrieveFeesCall__Inputs {
    return new RetrieveFeesCall__Inputs(this);
  }

  get outputs(): RetrieveFeesCall__Outputs {
    return new RetrieveFeesCall__Outputs(this);
  }
}

export class RetrieveFeesCall__Inputs {
  _call: RetrieveFeesCall;

  constructor(call: RetrieveFeesCall) {
    this._call = call;
  }
}

export class RetrieveFeesCall__Outputs {
  _call: RetrieveFeesCall;

  constructor(call: RetrieveFeesCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetBurnFeeCall extends ethereum.Call {
  get inputs(): SetBurnFeeCall__Inputs {
    return new SetBurnFeeCall__Inputs(this);
  }

  get outputs(): SetBurnFeeCall__Outputs {
    return new SetBurnFeeCall__Outputs(this);
  }
}

export class SetBurnFeeCall__Inputs {
  _call: SetBurnFeeCall;

  constructor(call: SetBurnFeeCall) {
    this._call = call;
  }

  get _burnFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBurnFeeCall__Outputs {
  _call: SetBurnFeeCall;

  constructor(call: SetBurnFeeCall) {
    this._call = call;
  }
}

export class SetLiquidationPenaltyCall extends ethereum.Call {
  get inputs(): SetLiquidationPenaltyCall__Inputs {
    return new SetLiquidationPenaltyCall__Inputs(this);
  }

  get outputs(): SetLiquidationPenaltyCall__Outputs {
    return new SetLiquidationPenaltyCall__Outputs(this);
  }
}

export class SetLiquidationPenaltyCall__Inputs {
  _call: SetLiquidationPenaltyCall;

  constructor(call: SetLiquidationPenaltyCall) {
    this._call = call;
  }

  get _liquidationPenalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationPenaltyCall__Outputs {
  _call: SetLiquidationPenaltyCall;

  constructor(call: SetLiquidationPenaltyCall) {
    this._call = call;
  }
}

export class SetRatioCall extends ethereum.Call {
  get inputs(): SetRatioCall__Inputs {
    return new SetRatioCall__Inputs(this);
  }

  get outputs(): SetRatioCall__Outputs {
    return new SetRatioCall__Outputs(this);
  }
}

export class SetRatioCall__Inputs {
  _call: SetRatioCall;

  constructor(call: SetRatioCall) {
    this._call = call;
  }

  get _ratio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRatioCall__Outputs {
  _call: SetRatioCall;

  constructor(call: SetRatioCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
